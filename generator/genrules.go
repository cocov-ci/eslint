package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strings"

	"github.com/PuerkitoBio/goquery"
	"github.com/levigross/grequests"
)

const (
	problems    = "possible-problems"
	suggestions = "suggestions"
	lf          = "layout--formatting"
)

const rulesURl = "https://eslint.org/docs/latest/rules/"

func main() {
	rs, err := getRules()
	if err != nil {
		panic(err)
	}

	buildFile(rs)
}

func getRules() (map[string]map[string]bool, error) {
	resp, err := grequests.Get(rulesURl, nil)
	if err != nil {
		return nil, err
	}

	doc, err := goquery.NewDocumentFromReader(bytes.NewReader(resp.Bytes()))
	if err != nil {
		return nil, err
	}

	rules := map[string]map[string]bool{
		problems:    {},
		suggestions: {},
		lf:          {},
	}

	currentRule := ""
	doc.Find("h2, a").Each(func(i int, s *goquery.Selection) {
		switch {
		case s.Is("h2"):
			v, ok := s.Attr("id")
			if ok {
				if _, ok := rules[v]; ok {
					currentRule = v
				}
			}

		case s.Is("a"):
			if currentRule == "" {
				return
			}
			c, ok := s.Attr("class")
			if ok && c == "rule__name" {
				rules[currentRule][s.Nodes[0].LastChild.Data] = true
			}
		}
	})
	return rules, nil
}

func buildFile(ruleMap map[string]map[string]bool) {
	fileName := "generated_rules.go"

	b := strings.Builder{}
	b.WriteString("// Code generated by generator/genrules. DO NOT EDIT.\n")
	b.WriteString("package plugin\n")
	b.WriteString("import \"github.com/cocov-ci/go-plugin-kit/cocov\"\n")
	b.WriteString("var rules = map[string]cocov.IssueKind{\n")
	for ruleType, rules := range ruleMap {
		for ruleName, _ := range rules {

			issueKind := ""
			switch ruleType {
			case suggestions:
				issueKind = "cocov.IssueKindConvention"
			case problems:
				issueKind = "cocov.IssueKindBug"
			case lf:
				issueKind = "cocov.IssueKindStyle"
			}
			b.WriteString(fmt.Sprintf("\"%s\": %s,\n", ruleName, issueKind))
		}
	}

	b.WriteString("}")
	src, err := format.Source([]byte(b.String()))
	if err != nil {
		panic(err)
	}

	if err = os.WriteFile(fileName, src, os.ModePerm); err != nil {
		panic(err)
	}
}
