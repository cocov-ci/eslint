// Code generated by MockGen. DO NOT EDIT.
// Source: plugin/iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	cocov "github.com/cocov-ci/go-plugin-kit/cocov"
	gomock "github.com/golang/mock/gomock"
)

// MockExec is a mock of Exec interface.
type MockExec struct {
	ctrl     *gomock.Controller
	recorder *MockExecMockRecorder
}

// MockExecMockRecorder is the mock recorder for MockExec.
type MockExecMockRecorder struct {
	mock *MockExec
}

// NewMockExec creates a new mock instance.
func NewMockExec(ctrl *gomock.Controller) *MockExec {
	mock := &MockExec{ctrl: ctrl}
	mock.recorder = &MockExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExec) EXPECT() *MockExecMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockExec) Exec(cmd string, args []string, opts *cocov.ExecOpts) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", cmd, args, opts)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockExecMockRecorder) Exec(cmd, args, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExec)(nil).Exec), cmd, args, opts)
}

// Exec2 mocks base method.
func (m *MockExec) Exec2(arg0 string, arg1 []string, arg2 *cocov.ExecOpts) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec2", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exec2 indicates an expected call of Exec2.
func (mr *MockExecMockRecorder) Exec2(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec2", reflect.TypeOf((*MockExec)(nil).Exec2), arg0, arg1, arg2)
}
